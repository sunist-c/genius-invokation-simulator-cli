// {{.sourceNameType}}To{{.destNameType}}Adapter generated by adapter.tpl
type {{.sourceNameType}}To{{.destNameType}}Adapter struct {
	dictionary map[{{.sourceType}}]{{.destType}}
}

func (adapter *{{.sourceNameType}}To{{.destNameType}}Adapter) Convert(source {{.sourceType}}) (success bool, result {{.destType}}) {
	descriptionTypeResult, exist := adapter.dictionary[source]
	return exist, descriptionTypeResult
}

// New{{.sourceNameType}}To{{.destNameType}}Adapter generated by adapter.tpl
func New{{.sourceNameType}}To{{.destNameType}}Adapter() adapter.Adapter[{{.sourceType}}, {{.destType}}] {
	return &{{.sourceNameType}}To{{.destNameType}}Adapter{
		dictionary: map[{{.sourceType}}]{{.destType}}{
			{{range .enums}}{{.sourceValue}}: {{.destValue}},
			{{end}}
		},
	}
}

// {{.destNameType}}To{{.sourceNameType}}Adapter generated by adapter.tpl
type {{.destNameType}}To{{.sourceNameType}}Adapter struct {
	dictionary: map[{{.destType}}]{{.sourceType}}
}

func (adapter *{{.destNameType}}To{{.sourceNameType}}Adapter) Convert(source {{.destType}}) (success bool, result {{.sourceType}}) {
	descriptionTypeResult, exist := adapter.dictionary[source]
	return exist, descriptionTypeResult
}

// New{{.destNameType}}To{{.sourceNameType}}Adapter generated by adapter.tpl
func New{{.destNameType}}To{{.sourceNameType}}Adapter() adapter.Adapter[{{.destType}}, {{.sourceType}}] {
	return &{{.destNameType}}To{{.sourceNameType}}Adapter{
		dictionary: map[{{.destType}}]{{.sourceType}}{
			{{range .enums}}{{.destValue}}: {{.sourceValue}},
			{{end}}
		},
	}
}